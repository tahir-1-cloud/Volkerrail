@using System.Text.RegularExpressions;
@using System.Security.Principal;
@using Newtonsoft.Json
@using PRISM.DTO;
@using PRISM.DTO.Employeedto
@using PRISM.Models;
@using Nancy.Json;
@using System.Security.Claims


@{
    string type = Context.Request.Query["type"];
    string displaytype = "";
    if (type == "VSTPContact")
        displaytype = "VSTP Contact";
    else if (type == "ShiftStatus")
        displaytype = "Shift Status";
    else if (type == "LeaveTypes")
        displaytype = "Leave Types";
    else if (type == "Employee")
        displaytype = "Employee Types";
    else if (type == "Statuses")
        displaytype = "Status";
    else if (type == "MachineOwner")
        displaytype = "Machine Owner";
    else if (type == "MachineDepartment")
        displaytype = "Machine Department";
    else if (type == "ACT")
        displaytype = "ACT";
    else if (type == "ChangePeriod")
        displaytype = "Change Period";
    else if (type == "ChangeType")
        displaytype = "Change Type";
    else if (type == "FurtherAction")
        displaytype = "Further Action";
    else
        displaytype = type;

    bool IsInsert = false;
    bool IsEdit = false;
    bool IsRead = false;
    bool IsDelete = false;

    var serializer = new JavaScriptSerializer();
}
@if (User.Identity.IsAuthenticated)
{

    var identity = User.Identity as ClaimsIdentity;

    try
    {
        var roleObject = JsonConvert.DeserializeObject<List<ModuleRoleModels>>(Context.Session.GetString("UserRoles"));
        if (roleObject != null)
        {
            var currentObj = roleObject.Where(x => x.ModuleIdentity == type).FirstOrDefault();
            if (currentObj != null)
            {
                IsInsert = currentObj.ActionRoles.IsInsert ?? false;
                IsEdit = currentObj.ActionRoles.IsEdit ?? false;
                IsRead = currentObj.ActionRoles.IsRead ?? false;
                IsDelete = currentObj.ActionRoles.IsDelete ?? false;
            }
        }
    }
    catch (Exception ex)
    {

    }


}

@model List<LookupEntity>
<div id="apporg" class="d-flex flex-column-fluid align-items-start container-xxl">
    <!--begin::Post-->
    <div class="content flex-row-fluid" id="kt_content">
        <!--begin::Card-->
        <div class="card">
            <!--begin::Card header-->
            <div class="card-header border-0 pt-6">

                <div class="card-toolbar">
                    <!--begin::Toolbar-->
                    <div class="d-flex justify-content-end" data-kt-customer-table-toolbar="base">
                        @{
                            if (IsInsert)
                            {


                                <button type="button" class="btn btn-primary" v-on:click="ShowLookup()">Add @displaytype</button>
                            }
                        }
                    </div>
                </div>
                <!--end::Card toolbar-->
            </div>
            <!--end::Card header-->
            <!--begin::Card body-->
            <div class="card-body pt-0 ">
                <!--begin::Table-->
                <div class="table-responsive">
                    <table class="table" id="kt_customers_table">
                        <thead>
                            <tr class="text-start text-gray-400 fw-bold fs-7 text-uppercase gs-0">
                                <th style="width:30px"></th>
                                <th class="min-w-125px">Name</th>
                                <th class="min-w-125px">Description</th>
                                <th class="text-end min-w-70px">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="fw-semibold text-gray-600">
                            @{

                                if (IsRead)
                                {
                                    if (Model?.Count > 0)
                                    {
                                        for (int i = 0; i < Model.Count; i++)
                                        {

                                            var r = Model[i];
                                            <tr>
                                                <td>
                                                    @((i + 1).ToString())
                                                </td>
                                                <td>
                                                    @{
                                                        if (IsEdit)
                                                        {
                                                            
                                                                var serializedJson = serializer.Serialize(r);
                                                                var escapedJson = serializedJson.Replace("'", "\\'");
                                                            
                                                            <a v-on:click="editItem('@escapedJson')" class="menu-link px-3">@r.Name</a>

                                                            // <a v-on:click="Edit('@(serializer.Serialize(r))')" class="menu-link px-3">@r.Name</a>
                                                        }
                                                        else
                                                        {
                                                            @r.Name
                                                        }
                                                    }


                                                </td>
                                                <td>
                                                    @r.Description
                                                </td>
                                                <td class="text-end">
                                                    @{
                                                        if (IsDelete)
                                                        {
                                                            <a class="menu-link px-3" v-on:click="Delete(@r.Id.ToString())">Delete</a>
                                                        }
                                                    }

                                                </td>

                                            </tr>
                                        }
                                    }
                                }
                            }

                        </tbody>
                        <!--end::Table body-->
                    </table>
                </div>
            </div>
            <!--end::Card body-->
        </div>
        <!--end::Card-->
        <!--begin::Modals-->
        <!--begin::Modal - Customers - Add-->
        <div class="modal fade" id="lookupmodel" tabindex="-1" aria-hidden="true">
            <!--begin::Modal dialog-->
            <div class="modal-dialog modal-dialog-centered mw-650px">
                <!--begin::Modal content-->
                <div class="modal-content">
                    <!--begin::Form-->
                    <form class="form" action="#" id="inputform">
                        <!--begin::Modal header-->
                        <div class="modal-header" id="kt_modal_add_customer_header">
                            <!--begin::Modal title-->
                            <h2 class="fw-bold">Add a @displaytype</h2>
                            <!--end::Modal title-->
                            <!--begin::Close-->
                            <div id="kt_modal_add_customer_close" v-on:click="ClosePopup()" class="btn btn-icon btn-sm btn-active-icon-primary">
                                <i class="ki-duotone ki-cross fs-1">
                                    <span class="path1"></span>
                                    <span class="path2"></span>
                                </i>
                            </div>
                            <!--end::Close-->
                        </div>
                        <!--end::Modal header-->
                        <!--begin::Modal body-->
                        <div class="modal-body py-10 px-lg-17">
                            <!--begin::Scroll-->
                            <div class="scroll-y me-n7 pe-7" id="kt_modal_add_customer_scroll" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-max-height="auto" data-kt-scroll-dependencies="#kt_modal_add_customer_header" data-kt-scroll-wrappers="#kt_modal_add_customer_scroll" data-kt-scroll-offset="300px">
                                <!--begin::Input group-->
                                <div class="fv-row mb-7">
                                    <label class="required fs-6 fw-semibold mb-2">Name</label>
                                    <input type="text" class="form-control form-control-solid validate[required]" placeholder="" name="name" v-model="d.Name" />
                                    <!--end::Input-->
                                </div>
                                <div class="fv-row mb-15">
                                    <label class="fs-6 fw-semibold mb-2">Description</label>
                                    <input type="text" class="form-control form-control-solid" placeholder="" name="description" v-model="d.Description" />
                                </div>
                            </div>
                            <!--end::Scroll-->
                        </div>
                        <!--end::Modal body-->
                        <!--begin::Modal footer-->
                        <div class="modal-footer flex-center">
                            <!--begin::Button-->
                            <button type="reset" id="kt_modal_add_customer_cancel" v-on:click="ClosePopup()" class="btn btn-light me-3">Discard</button>
                            <!--end::Button-->
                            <!--begin::Button-->
                            @{
                                if (IsInsert)
                                {
                                    <button type="button" id="kt_modal_add_customer_submit" class="btn btn-primary" v-on:click="Insert($event)">
                                        <span class="indicator-label">Submit</span>
                                        <span class="indicator-progress">
                                            Please wait...
                                            <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                                        </span>
                                    </button>
                                }
                            }
                            <!--end::Button-->
                        </div>
                        <!--end::Modal footer-->
                    </form>
                    <!--end::Form-->
                </div>
            </div>
        </div>

    </div>
    <!--end::Post-->
</div>


@section scripts {
    <link href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css" rel="stylesheet" />
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script>
        var objCommon = new Common();
        $(document).ready(function () {


            var app = new Vue({
                el: '#apporg',
                data: {
                    DataList: [],
                    d: {
                        Id: 0,
                        Name: "",
                        Description: "",
                        LookupType: '@type.ToString()'
                    }
                },
                methods: {
                    Delete(id) {
                        var param = {
                            Id: id
                        };

                        objCommon.AjaxCall("/Lookups/delete", JSON.stringify(param), "POST", true, function (response) {
                            objCommon.ShowMessage("Deleted.", "success");
                            location.reload();
                        });
                    },
                    Edit(data) {
                        var json = JSON.parse(data);
                        this.d = {};
                        //this.d=;
                        this.d.Name = json.name;
                        this.d.Id = json.id;
                        this.d.Description = json.description;
                        $("#lookupmodel").modal("show");
                    },
                    ShowLookup($event) {
                        this.d = {};
                        this.d.Id = 0;
                        $("#lookupmodel").modal("show");
                    },
                    Insert($event) {
                        if (!objCommon.Validate("#inputform"))
                            return;

                        var param = {
                            Name: this.d.Name,
                            Description: this.d.Description,
                            LookupType: '@type.ToString()',
                            Id: this.d.Id
                        };

                        objCommon.AjaxCall("/Lookups/insert", JSON.stringify(param), "POST", true, function (response) {
                            objCommon.ShowMessage("Added.", "success");

                            $("#lookupmodel").modal("hide");
                            location.reload();
                        }, $event.currentTarget);

                    },
                    GetData($event) {


                        objCommon.AjaxCall("/Lookups/GetData", $.param({ Type }), "GET", true, function (response) {
                            console.log(response);
                        }, $event == null ? null : $event.currentTarget);

                    },
                    ClosePopup() {
                        $("#lookupmodel").modal("hide");
                    }

                },
                created() {


                    //GetData(null);
                    //var url = 'https://api.example.com/endpoint';
                    //var postData = {
                    //	key1: 'value1',
                    //	key2: 'value2'
                    //};

                    //// Make the POST request using Axios
                    //axios.post(url, postData)
                    //	.then(function (response) {
                    //		// Handle successful response
                    //		console.log('Response:', response.data);
                    //	})
                    //	.catch(function (error) {
                    //		// Handle error
                    //		console.error('Error:', error);
                    //	});

                },
                updated() {

                },
                mounted() {
                }
            })
            var tabLink = "Lookups";
            var lookuptype = '@type.ToString()';
            if (lookuptype == "Organisations" || lookuptype == "ChangePeriod" || lookuptype == "ChangeType" || lookuptype == "FurtherAction") {
                tabLink = "ChangeLogLookups";
            }
            console.log(tabLink, lookuptype);
            $(".nav-item").removeClass("active");
            $("#li" + tabLink).addClass("active");
            $("#li" + tabLink + " a").addClass("active");
            $(".menu-item").removeClass("show");
            $(".menu-item").removeClass("here");
            $("#lookup" + '@type.ToString()').addClass("here");
            $("#lookup" + '@type.ToString()').addClass("show");
            $(".tab-pane").removeClass("active");
            $("#tab" + tabLink).addClass("active");
            $(".tab-pane").removeClass("show");
            $("#tab" + tabLink).addClass("show");
            $("#kt_customers_table").dataTable();

        })
    </script>

}